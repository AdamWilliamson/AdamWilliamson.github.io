import{d as g,g as l,h as w,k as y,o as t,i as n,w as e,f as a,b as o,e as k,j as s,a as b}from"./index-61356ea8.js";const C=b("h3",null,"Is Greater Than Or Equal To",-1),I=g({__name:"IsGreaterThanOrEqualToValidation",setup(O){const u=l(""),c=l(""),_=l(""),d=l("");return w(async()=>{[u.value,c.value,_.value,d.value]=await y("IsGreaterThanOrEqualTo")}),(V,q)=>{const i=a("v-card-title"),p=a("v-card-text"),v=a("v-card"),f=a("v-col"),m=a("v-row"),r=a("CodeWindow"),h=a("PanelsOrTabs"),T=a("v-container");return t(),n(T,{fluid:"","bg-color":"surface"},{default:e(()=>[o(m,null,{default:e(()=>[o(f,null,{default:e(()=>[o(v,null,{default:e(()=>[o(i,null,{default:e(()=>[C]),_:1}),o(p,null,{default:e(()=>[k("Is Greater Than Or Equal To works on any IComparable based types, note that it will not return an error if both fields are nulls. It will report an error if the fields are of different types or if only one of them is null.")]),_:1})]),_:1})]),_:1})]),_:1}),o(h,null,{code:e(()=>[u.value?(t(),n(r,{key:0,language:"csharp",source:u.value},null,8,["source"])):s("",!0)]),request:e(()=>[c.value?(t(),n(r,{key:0,language:"csharp",source:c.value},null,8,["source"])):s("",!0)]),errorreport:e(()=>[d.value?(t(),n(r,{key:0,language:"csharp",source:d.value},null,8,["source"])):s("",!0)]),openapi:e(()=>[_.value?(t(),n(r,{key:0,language:"csharp",source:_.value},null,8,["source"])):s("",!0)]),_:1})]),_:1})}}});export{I as default};
