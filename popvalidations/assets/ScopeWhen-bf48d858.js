import{d as w,g as c,h as y,k as W,o as a,i as t,w as e,f as o,b as n,e as p,j as s,a as i}from"./index-61356ea8.js";const x=i("h3",null,"ScopeWhen",-1),S=i("br",null,null,-1),T=i("br",null,null,-1),O=w({__name:"ScopeWhen",setup(C){const u=c(""),r=c(""),_=c(""),d=c("");return y(async()=>{[u.value,r.value,_.value,d.value]=await W("ScopeWhen")}),(V,N)=>{const v=o("v-card-title"),h=o("v-card-text"),f=o("v-card"),m=o("v-col"),g=o("v-row"),l=o("CodeWindow"),k=o("PanelsOrTabs"),b=o("v-container");return a(),t(b,{fluid:"","bg-color":"surface"},{default:e(()=>[n(g,null,{default:e(()=>[n(m,null,{default:e(()=>[n(f,null,{default:e(()=>[n(v,null,{default:e(()=>[x]),_:1}),n(h,null,{default:e(()=>[p("ScopeWhen combines The Scope's ability to get external values, and When's ability to allow you to restrict the validations that run, dependant on an incoming value. "),S,p(" There are several varieties of ScopeWhen, for Tasked and non-Tasked values, and for if you need to use the Scope's value within the When check. "),T]),_:1})]),_:1})]),_:1})]),_:1}),n(k,null,{code:e(()=>[u.value?(a(),t(l,{key:0,language:"csharp",source:u.value},null,8,["source"])):s("",!0)]),request:e(()=>[r.value?(a(),t(l,{key:0,language:"csharp",source:r.value},null,8,["source"])):s("",!0)]),errorreport:e(()=>[d.value?(a(),t(l,{key:0,language:"csharp",source:d.value},null,8,["source"])):s("",!0)]),openapi:e(()=>[_.value?(a(),t(l,{key:0,language:"csharp",source:_.value},null,8,["source"])):s("",!0)]),_:1})]),_:1})}}});export{O as default};
