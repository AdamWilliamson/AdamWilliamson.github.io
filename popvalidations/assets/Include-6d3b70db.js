import{d as k,g as s,h as w,k as y,o as n,i as t,w as e,f as o,b as a,e as x,j as c,a as C}from"./index-61356ea8.js";const V=C("h3",null,"Include",-1),T=k({__name:"Include",setup(b){const u=s(""),r=s(""),_=s(""),d=s("");return w(async()=>{[u.value,r.value,_.value,d.value]=await y("Include")}),(B,I)=>{const i=o("v-card-title"),v=o("v-card-text"),p=o("v-card"),m=o("v-col"),f=o("v-row"),l=o("CodeWindow"),g=o("PanelsOrTabs"),h=o("v-container");return n(),t(h,{fluid:"","bg-color":"surface"},{default:e(()=>[a(f,null,{default:e(()=>[a(m,null,{default:e(()=>[a(p,null,{default:e(()=>[a(i,null,{default:e(()=>[V]),_:1}),a(v,null,{default:e(()=>[x("Breaking up a set of validations into reusable components, or into similar validations, can make managing your code easier. To allow you to do this, Include allows you to merge multiple validation classes into 1 set of validations.")]),_:1})]),_:1})]),_:1})]),_:1}),a(g,null,{code:e(()=>[u.value?(n(),t(l,{key:0,language:"csharp",source:u.value},null,8,["source"])):c("",!0)]),request:e(()=>[r.value?(n(),t(l,{key:0,language:"csharp",source:r.value},null,8,["source"])):c("",!0)]),errorreport:e(()=>[d.value?(n(),t(l,{key:0,language:"csharp",source:d.value},null,8,["source"])):c("",!0)]),openapi:e(()=>[_.value?(n(),t(l,{key:0,language:"csharp",source:_.value},null,8,["source"])):c("",!0)]),_:1})]),_:1})}}});export{T as default};
